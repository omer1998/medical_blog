import 'dart:convert';

// // ignore_for_file: public_member_api_docs, sort_constructors_first
// // required: associates our `main.dart` with the code generated by Freezed
// import 'dart:convert';

// import 'package:flutter/services.dart';
// import 'package:freezed_annotation/freezed_annotation.dart';

// // part 'models.freezed.dart';


// // final casee = Case(caseAuthorId: "dfjdifjd", caseName: "Case 1", demographicData: "Demographic Data", illnessHx: "Illness Hx", reviewHx: "Review Hx", medsHx: "Meds Hx", pmh: "PMH", psh: "PSH", familyHx: "Family Hx", physicalExam: "Physical Exam", vitalSigns: "Vital Signs", followUpNotes: "Follow Up Notes", ivx: "IVX", id: 'hfjhjsdhjhsjdh');

class MyCase {
  
  final String case_name;
  final String case_author;
  final String created_at;
  final String? name;
  MyCase({
    required this.case_name,
    required this.case_author,
    required this.created_at,
    this.name,
  });
 


  MyCase copyWith({
    String? case_name,
    String? case_author,
    String? created_at,
    String? name,
  }) {
    return MyCase(
      case_name: case_name ?? this.case_name,
      case_author: case_author ?? this.case_author,
      created_at: created_at ?? this.created_at,
      name: name ?? this.name,
    );
  }

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'case_name': case_name,
      'case_author': case_author,
      'created_at': created_at,
    };
  }

  factory MyCase.fromMap(Map<String, dynamic> map) {
    return MyCase(
      case_name: map['case_name'] as String,
      case_author: map['case_author'] as String,
      created_at: map['created_at'] as String,
      name: map['profiles']["name"] != null ? map['profiles']["name"] as String : null,
    );
  }

  String toJson() => json.encode(toMap());

  factory MyCase.fromJson(String source) => MyCase.fromMap(json.decode(source) as Map<String, dynamic>);

  @override
  String toString() {
    return 'MyCase(case_name: $case_name, case_author: $case_author, created_at: $created_at, name: $name)';
  }

  @override
  bool operator ==(covariant MyCase other) {
    if (identical(this, other)) return true;
  
    return 
      other.case_name == case_name &&
      other.case_author == case_author &&
      other.created_at == created_at &&
      other.name == name;
  }

  @override
  int get hashCode {
    return case_name.hashCode ^
      case_author.hashCode ^
      created_at.hashCode ^
      name.hashCode;
  }
  }


 class Case {
  final String id;
  final String caseName;
  final String caseAuthorId;
  final String demographicData;
  final String cheifComplain;
  final String illnessHx;
  final String reviewHx;
  final String medsHx;
  final String pmh;
  final String psh;
  final String familyHx;
  final String physicalExam;
  final String vitalSigns;
  final String followUpNotes;
  final String managementPlan;
  final String ddx;
  final String? ivx;
  // final String authorName;
  Case({
    required this.id,
    required this.caseName,
    required this.caseAuthorId,
    required this.demographicData,
    required this.cheifComplain,
    required this.illnessHx,
    required this.reviewHx,
    required this.medsHx,
    required this.pmh,
    required this.psh,
    required this.familyHx,
    required this.physicalExam,
    required this.vitalSigns,
    required this.followUpNotes,
    required this.managementPlan,
    required this.ddx,
    this.ivx,
  });

  Case copyWith({
    String? id,
    String? caseName,
    String? caseAuthorId,
    String? demographicData,
    String? cheifComplain,
    String? illnessHx,
    String? reviewHx,
    String? medsHx,
    String? pmh,
    String? psh,
    String? familyHx,
    String? physicalExam,
    String? vitalSigns,
    String? followUpNotes,
    String? managementPlan,
    String? ddx,
    String? ivx,
  }) {
    return Case(
      id: id ?? this.id,
      caseName: caseName ?? this.caseName,
      caseAuthorId: caseAuthorId ?? this.caseAuthorId,
      demographicData: demographicData ?? this.demographicData,
      cheifComplain: cheifComplain ?? this.cheifComplain,
      illnessHx: illnessHx ?? this.illnessHx,
      reviewHx: reviewHx ?? this.reviewHx,
      medsHx: medsHx ?? this.medsHx,
      pmh: pmh ?? this.pmh,
      psh: psh ?? this.psh,
      familyHx: familyHx ?? this.familyHx,
      physicalExam: physicalExam ?? this.physicalExam,
      vitalSigns: vitalSigns ?? this.vitalSigns,
      followUpNotes: followUpNotes ?? this.followUpNotes,
      managementPlan: managementPlan ?? this.managementPlan,
      ddx: ddx ?? this.ddx,
      ivx: ivx ?? this.ivx,
    );
  }

  // Map<String, dynamic> 

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'id': id,
      'case_name': caseName,
      'case_author': caseAuthorId,
      'demographic_data': demographicData,
      'cheif_complain': cheifComplain,
      'illness_hx': illnessHx,
      'review_hx': reviewHx,
      'meds_hx': medsHx,
      'pmh': pmh,
      'psh': psh,
      'family_hx': familyHx,
      'physical_exam': physicalExam,
      'vital_signs': vitalSigns,
      'followUp_notes': followUpNotes,
      'management_plan': managementPlan,
      'ddx': ddx,
      'ivx': ivx,
    };
  }

  factory Case.fromMap(Map<String, dynamic> map) {
    return Case(
      id: map['id'] as String,
      caseName: map['caseName'] as String,
      caseAuthorId: map['caseAuthorId'] as String,
      demographicData: map['demographicData'] as String,
      cheifComplain: map['cheifComplain'] as String,
      illnessHx: map['illnessHx'] as String,
      reviewHx: map['reviewHx'] as String,
      medsHx: map['medsHx'] as String,
      pmh: map['pmh'] as String,
      psh: map['psh'] as String,
      familyHx: map['familyHx'] as String,
      physicalExam: map['physicalExam'] as String,
      vitalSigns: map['vitalSigns'] as String,
      followUpNotes: map['followUpNotes'] as String,
      managementPlan: map['managementPlan'] as String,
      ddx: map['ddx'] as String,
      ivx: map['ivx'] != null ? map['ivx'] as String : null,
    );
  }

  String toJson() => json.encode(toMap());

  factory Case.fromJson(String source) => Case.fromMap(json.decode(source) as Map<String, dynamic>);

  @override
  String toString() {
    return 'Case(id: $id, caseName: $caseName, caseAuthorId: $caseAuthorId, demographicData: $demographicData, cheifComplain: $cheifComplain, illnessHx: $illnessHx, reviewHx: $reviewHx, medsHx: $medsHx, pmh: $pmh, psh: $psh, familyHx: $familyHx, physicalExam: $physicalExam, vitalSigns: $vitalSigns, followUpNotes: $followUpNotes, managementPlan: $managementPlan, ddx: $ddx, ivx: $ivx)';
  }

  @override
  bool operator ==(covariant Case other) {
    if (identical(this, other)) return true;
  
    return 
      other.id == id &&
      other.caseName == caseName &&
      other.caseAuthorId == caseAuthorId &&
      other.demographicData == demographicData &&
      other.cheifComplain == cheifComplain &&
      other.illnessHx == illnessHx &&
      other.reviewHx == reviewHx &&
      other.medsHx == medsHx &&
      other.pmh == pmh &&
      other.psh == psh &&
      other.familyHx == familyHx &&
      other.physicalExam == physicalExam &&
      other.vitalSigns == vitalSigns &&
      other.followUpNotes == followUpNotes &&
      other.managementPlan == managementPlan &&
      other.ddx == ddx &&
      other.ivx == ivx;
  }

  @override
  int get hashCode {
    return id.hashCode ^
      caseName.hashCode ^
      caseAuthorId.hashCode ^
      demographicData.hashCode ^
      cheifComplain.hashCode ^
      illnessHx.hashCode ^
      reviewHx.hashCode ^
      medsHx.hashCode ^
      pmh.hashCode ^
      psh.hashCode ^
      familyHx.hashCode ^
      physicalExam.hashCode ^
      vitalSigns.hashCode ^
      followUpNotes.hashCode ^
      managementPlan.hashCode ^
      ddx.hashCode ^
      ivx.hashCode;
  }
}
